from collections import deque, defaultdict, Counter
from typing import List, Tuple, Optional, Dict, Set
import heapq

map = {} # 
# temp map that overrides original map
tmpMaps = [] # list of tmp maps (in order from oldest to most recent)
# [transaction 1, nested transaction 2]
# commit
# nested trans 2
# override transaction 1 with all the parings of t2
# tmpMaps = [transaction 1]
# possible to roll back

# map; a -> 1
# tmpMaps = [also doesn't have a mapping, doesn't have any a mapping]

def get(key):
    if tmpMaps:
        for i in range(len(tmpMaps) - 1, -1 , -1):
            if key in tmpMaps[i]:
                return tmpMaps[i][key]
    return map.get(key)


def set(key, value):
    if tmpMaps:
        tmpMaps[-1][key] = value
    else:
        map[key] = value
    
def begin():
    tmpMaps.append({})

    
def commit():
    if not tmpMaps:
        print("ERROR")
        return 
    mapToCommit = tmpMaps.pop()
    
    if tmpMaps:
        toMerge = tmpMaps[-1]
    else:
        toMerge = map

    for k, v in mapToCommit.items():
        toMerge[k] = v

        
def rollback():
    if not tmpMaps:
        print('ERROR')
        return
    tmpMaps.pop()


""" # Test 1
print(get('A'))      # Expected: None
set('A', 1)
print(get('A'))      # Expected: 1
 """



""" # Test 2
print(get('A'))      # Expected: None
set('A', 1)
set('A', 2)
print(get('A'))      # Expected: 2 """


""" # Test 3
rollback()           # Expected: ERROR (since no transaction has begun)
 """



""" # Test 4
commit()  # Expected: ERROR (since no transaction has begun)
    """


""" # Test 5
set('A', 1)
begin()
print(get('A'))      # Expected: 1
set('A', 2)
commit()
print(get('A'))      # Expected: 2
 """



""" # Test 6
set('A', 1)
begin()
set('A', 2)
begin()
set('A', 3)
print(get('A'))  # Expected: 3
commit()
print(get('A'))  # Excpected: 3
rollback()
print(get('A'))  # Expected: 1

 """


    







